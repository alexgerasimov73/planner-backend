// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pri s.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String  @unique
  name     String?
  password String

  breakInterval  Int?           @default(10) @map("break_interval")
  intervalsCount Int?           @default(7) @map("intervals_count")
  workInterval   Int?           @default(50) @map("work_interval")
  tasks          Task[]
  timeBlocks     TimeBlock[]
  timerSessions  TimerSession[]

  @@map("user")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  color    String?
  duration Int
  name     String
  order    Int?    @default(1)

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("time_block")
}

model TimerSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted Boolean? @default(false) @map("is_completed")

  user        User         @relation(fields: [userId], references: [id])
  userId      String       @map("user_id")
  timerRounds TimerRound[]

  @@map("timer_session")
}

model TimerRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  isCompleted  Boolean? @default(false) @map("is_completed")
  totalSeconds Int      @map("total_seconds")

  timerSession   TimerSession @relation(fields: [timerSessionId], references: [id], onDelete: Cascade)
  timerSessionId String       @map("timer_session_id")

  @@map("timer_round")
}

enum Priority {
  low
  medium
  high
}
